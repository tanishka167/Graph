// Using dfs alogorithm

class Solution {

    public static void dfs(char[][]grid ,int i,int j){
        if(i<0 || j<0 || i>=grid.length || j>=grid[i].length || grid[i][j]=='0'){
            return ;
        }
        grid[i][j]='0';
        dfs(grid,i,j+1);
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j-1);
    }

    public int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    dfs(grid,i,j);
                }
            }
        }
        return ans;
    }
}

// Using bfs algorithm

class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public static void bfs(int i,int j,char [][]grid,boolean[][] visited){
        visited[i][j]=true;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(i,j));
        while(!q.isEmpty()){
            int delrow=q.peek().first;
            int delcol=q.peek().second;
            q.remove();

            for(int row=-1;row<=1;row++){
                for(int col=-1;col<=1;col++){
                    if((row==-1 && col==0)||(row==0 && col==1) || (row==1 && col==0) || (row==0 && col==-1)){
                        int nrow=delrow+row;
                        int ncol=delcol+col;

                    if((nrow>=0 && nrow<grid.length) && (ncol>=0 && ncol<grid[0].length) && (grid[nrow][ncol]=='1' && visited[nrow][ncol]==false)){
                        visited[nrow][ncol]=true;
                        q.add(new Pair(nrow,ncol));
                        }
                    }
                }
            }
        }
    }
    public int numIslands(char[][] grid) {
        boolean visited[][]=new boolean[grid.length][grid[0].length];
        int c=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    c+=1;
                    bfs(i,j,grid,visited);
                }
            }
        }
        return c;
    }
}
