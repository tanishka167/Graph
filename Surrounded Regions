// Using bfs algorithm

class Node{
    int row;
    int col;
    Node(int r,int c){
        this.row=r;
        this.col=c;
    }
}
class Solution {
    int direction[][]=new int[][] {{1,0},{0,1},{-1,0},{0,-1}};

    public static boolean isValid(int row,int col,int m,int n){
        if(row>=0 && row<m && col>=0 && col<n){
            return true;
        }
        return false;
    }
    public void solve(char[][] board) {
        Queue<Node> q=new LinkedList<>();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if((i==0 || j==0 || i==board.length-1 || j==board[0].length-1) && board[i][j]=='O'){
                    q.add(new Node(i,j));
                    board[i][j]='V';
                }
            }
        }
        while(!q.isEmpty()){
            Node curr=q.poll();
            for(int[] dir:direction){
                int newRow=curr.row+dir[0];
                int newCol=curr.col+dir[1];
                if(isValid(newRow,newCol,board.length,board[0].length) && board[newRow][newCol]=='O'){
                    q.add(new Node(newRow,newCol));
                    board[newRow][newCol]='V';
                }
            }
        }
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
                else if(board[i][j]=='V'){
                    board[i][j]='O';
                }
            }
        }
    }
}
