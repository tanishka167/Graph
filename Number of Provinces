//Using bfs algorithm

class Solution {
    public static void dfs(int node,ArrayList<ArrayList<Integer>> lst,boolean[] visited){
        visited[node]=true;
        for(Integer it:lst.get(node)){
            if(!visited[it]){
                dfs(it,lst,visited);
            }
        }
    }

    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> lst=new ArrayList<>();
        for(int i=0;i<isConnected.length;i++){
            lst.add(new ArrayList<Integer>());
        }

        for(int i=0;i<isConnected.length;i++){
            for(int j=0;j<isConnected[0].length;j++){
                if(isConnected[i][j]==1 && i!=j){
                    lst.get(i).add(j);
                    lst.get(j).add(i);
                }
            }
        }
        int c=0;
        boolean[]visited=new boolean[isConnected.length];

        for(int i=0;i<isConnected.length;i++){
            if(!visited[i]){
                c+=1;
                dfs(i,lst,visited);
            }
        }
        return c;
    }
}
