// using dfs algorithm

class Solution {
    public List<List<Integer>> buildGraph(int [][]edges,int n){
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }

        for(int []edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }

    public static boolean solve(int source,int destination,List<List<Integer>> graph,boolean []visited){
        if(source==destination){
            return true;
        }
        visited[source]=true;
        boolean reached=false;
        for(int ngbr: graph.get(source)){
            if(!visited[ngbr]){
                reached=reached || solve(ngbr,destination,graph,visited);
                if(reached){
                    return true;
                }
            }
        }
        return reached;
    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        List<List<Integer>> graph=buildGraph(edges,n);

        boolean []visited=new boolean[n];
        return solve(source,destination,graph,visited);    
    }
}
