// Using bfs algorithm

class Node{
    int row;
    int col;
    int time;

    Node(int r,int c,int t){
        this.row=r;
        this.col=c;
        this.time=t;
    }
}
class Solution {
    
    public static boolean isValid(int i,int j,int m,int n){
        if(i>=0 && i<m && j>=0 && j<n){
            return true;
        }
        else{
            return false;
        }
    }
    int [][]dir=new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
    public int orangesRotting(int[][] grid) {
        int freshOrange=0;
        int m=grid.length;
        int n=grid[0].length;
        Queue<Node> q=new LinkedList<>();
        int minTime=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new Node(i,j,0));
                }
                else if(grid[i][j]==1){
                    freshOrange+=1;
                }
            }
        }
        while(!q.isEmpty()){
            Node curr=q.poll();
            // neighbours
            for(int[] direction: dir){
                int newRow=curr.row+direction[0];
                int newCol=curr.col+direction[1];
                if(isValid(newRow,newCol,m,n) && grid[newRow][newCol]==1){
                    q.add(new Node(newRow,newCol,curr.time+1));
                    grid[newRow][newCol]=2;
                    minTime=curr.time+1;
                    freshOrange-=1;
                }
            }
        }
        return freshOrange==0?minTime:-1;
    }
}
