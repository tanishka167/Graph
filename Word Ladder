// using bfs algorithm

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet=new HashSet<>(wordList);
        if(!wordSet.contains(endWord)){
            return 0;
        }
        Queue<String> q=new LinkedList<>();
        q.add(beginWord);
        int c=1;
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                String curr=q.poll();
                if(curr.equals(endWord)){
                    return c;
                }
                char[] currChange=curr.toCharArray();
                for(int j=0;j<currChange.length;j++){
                    char store=currChange[j];
                    for(char ch='a';ch<='z';ch++){
                        currChange[j]=ch;
                        String newWord=new String(currChange);
                        if(wordSet.contains(newWord)){
                            q.add(newWord);
                            wordSet.remove(newWord);
                        }
                    }
                    currChange[j]=store;
                }
            }
            c+=1;
        }
        return 0;
    }
}
